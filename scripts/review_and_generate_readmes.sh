#!/bin/zsh

# Prompt for PAT securely
read -s "GH_TOKEN?Enter your GitHub Classic PAT: "
export GH_TOKEN

# Set your org or user (edit as needed)
orgs=($(gh api user/orgs --jq '.[].login'))

# Dry-run mode (set to 0 to actually delete or push)
dry_run=1

# Function to call Node.js script for README generation
generate_readme() {
  sample_file="$1"
  output_file="$2"
  node "$(dirname "$0")/generate_readme.js" "$sample_file" "$output_file"
}

for org in "${orgs[@]}"; do
  repos=($(gh repo list "$org" --limit 1000 --json name -q '.[].name'))
  for repo in "${repos[@]}"; do
    echo "Reviewing $org/$repo..."
    # List all files in the repo
    files=$(gh api repos/$org/$repo/contents | jq -r '.[].name')
    # Check for README.md
    if ! echo "$files" | grep -iq '^README.md$'; then
      file_count=$(echo "$files" | grep -v '^README.md$' | wc -l | tr -d ' ')
      if [ "$file_count" -eq 0 ]; then
        echo "No files in $org/$repo. Would delete repository."
        if [ "$dry_run" -eq 0 ]; then
          gh repo delete "$org/$repo" --confirm
        fi
      elif [ "$file_count" -ge 3 ]; then
        echo "$org/$repo has $file_count files. Would generate README.md."
        # Gather sample content from up to 5 files
        sample_file="${org}_${repo}_sample.txt"
        > "$sample_file"
        i=0
        for file in $files; do
          if [ "$file" != "README.md" ]; then
            echo "--- $file ---" >> "$sample_file"
            gh api repos/$org/$repo/contents/$file | jq -r '.content' | base64 --decode | head -20 >> "$sample_file" 2>/dev/null
            echo >> "$sample_file"
            i=$((i+1))
            if [ $i -ge 5 ]; then break; fi
          fi
        done
        # Call Node.js script to generate README.md
        if [ "$dry_run" -eq 0 ]; then
          generate_readme "$sample_file" README.md
          # Get the default branch name
          branch=$(gh repo view "$org/$repo" --json defaultBranchRef -q '.defaultBranchRef.name')
          # Get the latest commit SHA for the branch (if README.md exists)
          sha=$(gh api repos/$org/$repo/contents/README.md?ref=$branch | jq -r '.sha' 2>/dev/null)
          # Prepare base64 content
          content_b64=$(base64 -i README.md | tr -d '\n')
          # Create or update README.md via GitHub API
          if [ -z "$sha" ] || [ "$sha" = "null" ]; then
            # Create new README.md
            gh api repos/$org/$repo/contents/README.md \
              -X PUT \
              -f message="Add autogenerated README.md" \
              -f content="$content_b64" \
              -f branch="$branch"
          else
            # Update existing README.md (shouldn't happen, but safe)
            gh api repos/$org/$repo/contents/README.md \
              -X PUT \
              -f message="Update autogenerated README.md" \
              -f content="$content_b64" \
              -f branch="$branch" \
              -f sha="$sha"
          fi
        else
          echo "(Dry run) Would generate README.md for $org/$repo using LLM."
        fi
        rm -f "$sample_file" README.md
      else
        echo "$org/$repo has less than 3 files. No action taken."
      fi
    fi
  done
  echo "Completed $org."
done

echo "Review and README generation complete."
